// Created using LayerGen 3.5

using System;
using System.Data.SqlTypes;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace DataLayer
{
    [Serializable]
    public abstract partial class Customer
    {
        private int _customerId;
        private string _firstName;
        private string _lastName;


        // isDirty flag determines whether data has been changed.
        private bool _layerGenIsDirty;
        protected string _connectionString;
        // layerGenIsUpdate flag determines whether we need to do an update or an insert when saving.
        protected bool _layerGenIsUpdate;
        // isReadOnly determines if the row is in a read only state. This happens when partial
        // fields are loaded.
        private bool _isReadOnly;
        // concurrencyArray holds a serialized version of a database row to make concurrency work.
        private byte[] _concurrencyArray;
        private readonly BusinessLayer.Customer.ConcurrencyOptions _concurrency;

        private readonly bool _layerGenUseStoredProcedures;
        protected const string LayerGenTableName = "Customer";
        protected const string LayerGenTableNameDelimited = "[Customer]";
        private const string LayerGenFieldNames = "[FirstName],[LastName]";
        private const string LayerGenValueNames = "@val1,@val2";
        protected const string LayerGenPrimaryKey = "CustomerId";

        // nullDictionary is a dictionary for keeping track of which fields are null values.
        private readonly Dictionary<BusinessLayer.Customer.Fields, bool> _nullDictionary;
        // internalNameDictionary is a dictionary for holding the names of the fields, as they are in SQL Server.
        private readonly Dictionary<BusinessLayer.Customer.Fields, string> _internalNameDictionary;
        private int _oldPrimaryKeyValue;


        public virtual int CustomerId
        {
            get { return _customerId; }
            protected set { _customerId = value; _layerGenIsDirty = true; }
        }

        public virtual string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; _layerGenIsDirty = true; if(value == null) SetNull(BusinessLayer.Customer.Fields.FirstName); else UnsetNull(BusinessLayer.Customer.Fields.FirstName); }
        }

        public virtual string LastName
        {
            get { return _lastName; }
            set { _lastName = value; _layerGenIsDirty = true; if(value == null) SetNull(BusinessLayer.Customer.Fields.LastName); else UnsetNull(BusinessLayer.Customer.Fields.LastName); }
        }

        

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        protected Customer()
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, specifying
        /// if you want to use stored procedures or Sql text commands for data access.
        /// </summary>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, specifying
        /// if you want to use stored procedures or Sql text commands for data access.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        protected Customer(int id)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key. You can specify
        /// if you want to do all data access using stored procedures or Sql text.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(int id, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key. You can specify
        /// if you want to do all data access using stored procedures or Sql text.
        /// </summary>
		/// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        protected Customer(int id, List<BusinessLayer.Customer.Fields> fields)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, List<BusinessLayer.Customer.Fields> fields)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(int id, List<BusinessLayer.Customer.Fields> fields, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, List<BusinessLayer.Customer.Fields> fields, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        protected Customer(DataRow dr)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, DataRow dr)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(DataRow dr, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, DataRow dr, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = BusinessLayer.Customer.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
		protected Customer(BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            _oldPrimaryKeyValue = _customerId;
       }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
		protected Customer(BusinessLayer.LayerGenConnectionString connectionString, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            _oldPrimaryKeyValue = _customerId;
       }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
		protected Customer(BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            _oldPrimaryKeyValue = _customerId;
       }

 /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
		protected Customer(BusinessLayer.LayerGenConnectionString connectionString, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            _oldPrimaryKeyValue = _customerId;
       }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected Customer(int id, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id);
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id);
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(int id, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id);
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id);
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected Customer(int id, List<BusinessLayer.Customer.Fields> fields, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id, fields);
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, List<BusinessLayer.Customer.Fields> fields, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id, fields);
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(int id, List<BusinessLayer.Customer.Fields> fields, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id, fields);
            _oldPrimaryKeyValue = _customerId;
        }

		
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Customer.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, int id, List<BusinessLayer.Customer.Fields> fields, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Get(id, fields);
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        protected Customer(DataRow dr, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, DataRow dr, BusinessLayer.Customer.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(DataRow dr, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Customer.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected Customer(BusinessLayer.LayerGenConnectionString connectionString, DataRow dr, BusinessLayer.Customer.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<BusinessLayer.Customer.Fields, bool>();
            _nullDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.FirstName, true);
            _nullDictionary.Add(BusinessLayer.Customer.Fields.LastName, true);

            _internalNameDictionary = new Dictionary<BusinessLayer.Customer.Fields, string>();
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.CustomerId, "CustomerId");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.FirstName, "FirstName");
            _internalNameDictionary.Add(BusinessLayer.Customer.Fields.LastName, "LastName");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Reads a DataRow and populates the properties from the DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the properties.</param>
        protected void Fill(DataRow dr)
        {
            if (HasField(_internalNameDictionary[BusinessLayer.Customer.Fields.CustomerId], dr))
            {
                if (dr[_internalNameDictionary[BusinessLayer.Customer.Fields.CustomerId]] == DBNull.Value)
                {
                    SetNull(BusinessLayer.Customer.Fields.CustomerId);
                }
                else
                {
                    CustomerId = (int) dr[_internalNameDictionary[BusinessLayer.Customer.Fields.CustomerId]];
                    UnsetNull(BusinessLayer.Customer.Fields.CustomerId);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(BusinessLayer.Customer.Fields.CustomerId);
            }

            if (HasField(_internalNameDictionary[BusinessLayer.Customer.Fields.FirstName], dr))
            {
                if (dr[_internalNameDictionary[BusinessLayer.Customer.Fields.FirstName]] == DBNull.Value)
                {
                    SetNull(BusinessLayer.Customer.Fields.FirstName);
                }
                else
                {
                    FirstName = (string) dr[_internalNameDictionary[BusinessLayer.Customer.Fields.FirstName]];
                    UnsetNull(BusinessLayer.Customer.Fields.FirstName);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(BusinessLayer.Customer.Fields.FirstName);
            }

            if (HasField(_internalNameDictionary[BusinessLayer.Customer.Fields.LastName], dr))
            {
                if (dr[_internalNameDictionary[BusinessLayer.Customer.Fields.LastName]] == DBNull.Value)
                {
                    SetNull(BusinessLayer.Customer.Fields.LastName);
                }
                else
                {
                    LastName = (string) dr[_internalNameDictionary[BusinessLayer.Customer.Fields.LastName]];
                    UnsetNull(BusinessLayer.Customer.Fields.LastName);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(BusinessLayer.Customer.Fields.LastName);
            }


            if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
            {
                _concurrencyArray = GetSerializedObject(this);
            }
        }

        /// <summary>
        /// Determines if the given field exists in the SqlDataReader.
        /// </summary>
        /// <param name="fieldName">The name of the field to search for.</param>
        /// <param name="reader">The SqlDataReader to search in.</param>
        /// <returns>Returns true if the field exists in the SqlDataReader, otherwise, returns false.</returns>
        protected bool HasField(string fieldName, SqlDataReader reader)
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                if (reader.GetName(i) == fieldName)
                    return true;
            }

            return false;
        }

        /// <summary>
        /// Determines if the given field exists in the DataRow.
        /// </summary>
        /// <param name="fieldName">The name of the field to search for.</param>
        /// <param name="row">The DataRow to search in.</param>
        /// <returns>Returns true if the field exists in the DataRow, otherwise, returns false.</returns>
        protected bool HasField(string fieldName, DataRow row)
        {
            return row.Table.Columns.Contains(fieldName);
        }

        /// <summary>
        /// Retrieves the specified fields from the row with the matching
        /// primary key from the database and stores them in the properties.
        /// </summary>
        /// <param name="id">The primary key of the row to pull.</param>
        /// <param name="fields">The fields to pull from the database.</param>
        protected void Get(int id, List<BusinessLayer.Customer.Fields> fields)
        {
            string strFields = "[" + LayerGenPrimaryKey + "],";

            // If there are no fields, then pull all fields
            if (fields == null || fields.Count == 0)
            {
                strFields = "*";
            }
            else
            {
                foreach (BusinessLayer.Customer.Fields field in fields)
                {
                    strFields = strFields + "[" + _internalNameDictionary[field] + "],";
                }
                strFields = strFields.TrimEnd(',');
            }

            string sql = "SELECT " + strFields + " FROM [dbo].[" + LayerGenTableName + "] WHERE " + LayerGenPrimaryKey + "=" + id;


            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = _connectionString;

                using (SqlCommand command = new SqlCommand())
                {
                    connection.Open();
                    command.CommandType = _layerGenUseStoredProcedures ? CommandType.StoredProcedure : CommandType.Text;
                    command.CommandText = _layerGenUseStoredProcedures ? ("dbo.spCustomer_Select").Replace("@", "") : sql;
                    command.Connection = connection;
                    if (_layerGenUseStoredProcedures)
                    {
                        command.Parameters.AddWithValue("@id", id);
                        command.Parameters.AddWithValue("@fields", strFields);
                    }
                    else
                    {

                    }

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (!reader.HasRows)
                            throw new BusinessLayer.RowNotFoundException(LayerGenTableName + ": Could not find row with id of " + id);

                        while (reader.Read())
                        {
                            CustomerId = (int) reader["CustomerId"];
                            UnsetNull(BusinessLayer.Customer.Fields.CustomerId);
                            if ((!HasField("FirstName", reader)) || reader.IsDBNull(reader.GetOrdinal("FirstName")))
                            {
                                SetNull(BusinessLayer.Customer.Fields.FirstName);
                            }
                            else
                            {
                                FirstName = (string) reader["FirstName"];
                                UnsetNull(BusinessLayer.Customer.Fields.FirstName);
                            }
                            if ((!HasField("LastName", reader)) || reader.IsDBNull(reader.GetOrdinal("LastName")))
                            {
                                SetNull(BusinessLayer.Customer.Fields.LastName);
                            }
                            else
                            {
                                LastName = (string) reader["LastName"];
                                UnsetNull(BusinessLayer.Customer.Fields.LastName);
                            }

                        }
                        if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                        {
                            _concurrencyArray = GetSerializedObject(this);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves the row with the matching primary key from the
        /// database and stores them in the properties.
        /// </summary>
        /// <param name="id">The primary key of the row to pull.</param>
        private void Get(int id)
        {
            Get(id, null);
        }

        /// <summary>
        /// Unsets the value of the given field to null.
        /// </summary>
        /// <param name="field">The field to unset as null.</param>
        private void UnsetNull(BusinessLayer.Customer.Fields field)
        {
            _nullDictionary[field] = false;
        }

        /// <summary>
        /// Sets the value of the given field to null.
        /// </summary>
        /// <param name="field">The field to set as null.</param>
        public void SetNull(BusinessLayer.Customer.Fields field)
        {
            _layerGenIsDirty = true;
            _nullDictionary[field] = true;
        }

        /// <summary>
        /// Determines if the given field is null or if it contains a value.
        /// </summary>
        /// <param name="field">The field to test for a null value.</param>
        /// <returns>True, if the field is null, otherwise, false.</returns>
        public bool IsNull(BusinessLayer.Customer.Fields field)
        {
            return _nullDictionary[field];
        }

        /// <summary>
        /// Resets all properties to their default (null) value.
        /// </summary>
        private void ResetToDefault()
        {
            _nullDictionary[BusinessLayer.Customer.Fields.FirstName] = true;
            _nullDictionary[BusinessLayer.Customer.Fields.LastName] = true;

            _oldPrimaryKeyValue = _customerId;
        }

        /// <summary>
        /// Deletes this row from the database.
        /// </summary>
        public void Delete()
        {
            if (!_layerGenUseStoredProcedures)
            {
                string cmdString = "DELETE FROM [dbo].[" + LayerGenTableName + "] WHERE [" + LayerGenPrimaryKey + "]=" + _customerId;

                using (SqlConnection connection = new SqlConnection())
                {
                    connection.ConnectionString = _connectionString;
                    connection.Open();
                    using (SqlCommand command = new SqlCommand())
                    {
                        command.Connection = connection;
                        command.CommandType = CommandType.Text;
                        command.CommandText = cmdString;

                        command.ExecuteNonQuery();
                    }
                }
            }
            else
            {
                using (SqlConnection connection = new SqlConnection())
                {
                    connection.ConnectionString = _connectionString;
                    connection.Open();
                    using (SqlCommand command = new SqlCommand())
                    {
                        command.Connection = connection;
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = ("dbo.spCustomer_Delete").Replace("@", "");
                        command.Parameters.AddWithValue("@val1", _customerId);

                        command.ExecuteNonQuery();
                    }
                }
            }           
            ResetToDefault();
            _layerGenIsDirty = false;
            _layerGenIsUpdate = false;
        }

        /// <summary>
        /// Saves this row to the database. It will either do an INSERT or an UPDATE
        /// depending on whether this is a new row or an existing row.
        /// </summary>
        /// <exception cref="BusinessLayer.ReadOnlyException">Thrown if only partial fields have loaded. If this is a force save, then this exception will not be thrown.</exception>
        /// <exception cref="BusinessLayer.OutOfSyncException">Thrown if concurrency is set to strict and the row being saved is out of sync with the row in the database.</exception>
        public void Save()
        {
            Save(false);
        }

        /// <summary>
        /// Saves this row to the database. It will either do an INSERT or an UPDATE
        /// depending on whether this is a new row or an existing row. You can specify
        /// whether or not to force save this row. If only partial fields have been
        /// loaded, force saving will force the row to save. Keep in mind though that
        /// the fields that are not loaded will be overwritten with a null value.
        /// </summary>
        /// <param name="forceSave">True, if you want to force save the row.</param>
        /// <exception cref="BusinessLayer.ReadOnlyException">Thrown if only partial fields have loaded. If this is a force save, then this exception will not be thrown.</exception>
        /// <exception cref="BusinessLayer.OutOfSyncException">Thrown if concurrency is set to strict and the row being saved is out of sync with the row in the database.</exception>
        public void Save(bool forceSave)
        {
            SqlParameter parameter;

            if (!_layerGenIsDirty)
            {
                return;
            }

            if (_isReadOnly && forceSave == false)
            {
                throw new BusinessLayer.ReadOnlyException(LayerGenTableName + " is in a read-only state because only partial fields have been loaded!");
            }

            if (!_layerGenIsUpdate)
            {
                if (!_layerGenUseStoredProcedures)
                {
                    const string cmdString =
                        "INSERT INTO [dbo].[" + LayerGenTableName + "] (" + LayerGenFieldNames + ") VALUES (" + LayerGenValueNames +
                        "); SELECT SCOPE_IDENTITY();";

                    using (SqlConnection connection = new SqlConnection())
                    {
                        connection.ConnectionString = _connectionString;
                        using (SqlCommand command = new SqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.Text;
                            command.CommandText = cmdString;
                        parameter = new SqlParameter("@val1", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.FirstName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _firstName;
                        command.Parameters.Add(parameter);
                        parameter = new SqlParameter("@val2", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.LastName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lastName;
                        command.Parameters.Add(parameter);

                            connection.Open();
                            object obj = command.ExecuteScalar();
                            
                            _customerId = (int) (decimal) obj;

                            _oldPrimaryKeyValue = _customerId;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
							if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
                else
                {
                    using (SqlConnection connection = new SqlConnection())
                    {
                        connection.ConnectionString = _connectionString;
                        using (SqlCommand command = new SqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.StoredProcedure;
                            command.CommandText = ("dbo.spCustomer_Insert").Replace("@", "");
                        parameter = new SqlParameter("@val1", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.FirstName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _firstName;
                        command.Parameters.Add(parameter);
                        parameter = new SqlParameter("@val2", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.LastName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lastName;
                        command.Parameters.Add(parameter);

                            connection.Open();
                            object obj = command.ExecuteScalar();
                            
                            _customerId = (int) (decimal) obj;

                            _oldPrimaryKeyValue = _customerId;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
                            if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
            }
            else
            {
                if (!_layerGenUseStoredProcedures)
                {
                    const string cmdString = "UPDATE [dbo].[" + LayerGenTableName + "] SET [FirstName]=@val1,[LastName]=@val2 WHERE " + LayerGenPrimaryKey + "=@val3";

                    using (SqlConnection connection = new SqlConnection())
                    {
                        connection.ConnectionString = _connectionString;
                        using (SqlCommand command = new SqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.Text;
                            command.CommandText = cmdString;
                        parameter = new SqlParameter("@val1", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.FirstName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _firstName;
                        command.Parameters.Add(parameter);
                        parameter = new SqlParameter("@val2", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.LastName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lastName;
                        command.Parameters.Add(parameter);

                            command.Parameters.AddWithValue("@val3", _oldPrimaryKeyValue);

                            if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                            {
                                if (!IsDataEqual())
                                {
                                    throw new BusinessLayer.OutOfSyncException(LayerGenTableName + ": Row is out of sync with database! Changes not written to database!");
                                }
                            }

                            connection.Open();
                            command.ExecuteNonQuery();
                            _oldPrimaryKeyValue = _customerId;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
                            if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
                else
                {
                    using (SqlConnection connection = new SqlConnection())
                    {
                        connection.ConnectionString = _connectionString;
                        using (SqlCommand command = new SqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.StoredProcedure;
                            command.CommandText = ("dbo.spCustomer_Update").Replace("@", "");
                        parameter = new SqlParameter("@val1", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.FirstName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _firstName;
                        command.Parameters.Add(parameter);
                        parameter = new SqlParameter("@val2", SqlDbType.NVarChar);
                        if (IsNull(BusinessLayer.Customer.Fields.LastName))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lastName;
                        command.Parameters.Add(parameter);

                            command.Parameters.AddWithValue("@val3", _oldPrimaryKeyValue);

                            if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                            {
                                if (!IsDataEqual())
                                {
                                    throw new BusinessLayer.OutOfSyncException(LayerGenTableName + ": Row is out of sync with database! Changes not written to database!");
                                }
                            }

                            connection.Open();
                            command.ExecuteNonQuery();
                            _oldPrimaryKeyValue = _customerId;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
                            if (_concurrency != BusinessLayer.Customer.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
            }
        }



        /// <summary>
        /// Retrieves all rows and all fields from the Customer table.
        /// </summary>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetAll(bool useStoredProcedures)
        {
            if (!useStoredProcedures)
            {
                return GetBySqlStatement("SELECT * FROM [dbo].[" + LayerGenTableName + "]");
            }

            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = Universal.GetConnectionString();

                using (SqlCommand command = new SqlCommand())
                {
                    connection.Open();
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = ("dbo.spCustomer_GetAll").Replace("@", "");
                    command.Connection = connection;

                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Retrieves all rows and all fields from the Customer table.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetAll(BusinessLayer.LayerGenConnectionString connectionString, bool useStoredProcedures)
        {
            if (!useStoredProcedures)
            {
                return GetBySqlStatement(connectionString, "SELECT * FROM [dbo].[" + LayerGenTableName + "]");
            }

            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = connectionString.ConnectionString;

                using (SqlCommand command = new SqlCommand())
                {
                    connection.Open();
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = ("dbo.spCustomer_GetAll").Replace("@", "");
                    command.Connection = connection;

                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Retrieves rows from the Customer table by executing the given stored procedure.
        /// </summary>
        /// <param name="procedureName">The name of the stored procedure to execute.</param>
        /// <param name="procedureParams">A dictionary of parameter/value pairs. This can be null if there are no parameters.</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetByStoredProcedure(string procedureName, Dictionary<string, object> procedureParams)
        {
            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = Universal.GetConnectionString();
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = procedureName;
                    if (procedureParams != null && procedureParams.Count > 0)
                    {
                        foreach (KeyValuePair<string, object> kvp in procedureParams)
                        {
                            command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                        }
                    }

                    connection.Open();
                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Retrieves rows from the Customer table by executing the given stored procedure.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="procedureName">The name of the stored procedure to execute.</param>
        /// <param name="procedureParams">A dictionary of parameter/value pairs. This can be null if there are no parameters.</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetByStoredProcedure(BusinessLayer.LayerGenConnectionString connectionString, string procedureName, Dictionary<string, object> procedureParams)
        {
            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = connectionString.ConnectionString;
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = procedureName;
                    if (procedureParams != null && procedureParams.Count > 0)
                    {
                        foreach (KeyValuePair<string, object> kvp in procedureParams)
                        {
                            command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                        }
                    }

                    connection.Open();
                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Retrieves rows from the Customer table, based on the given SQL statement.
        /// </summary>
        /// <param name="sql">The SQL statement to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetBySqlStatement(string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            Dictionary<string, string> paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = Universal.GetConnectionString();
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    connection.Open();
                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Retrieves rows from the Customer table, based on the given SQL statement.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="sql">The SQL statement to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetBySqlStatement(BusinessLayer.LayerGenConnectionString connectionString, string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            Dictionary<string, string> paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (SqlConnection connection = new SqlConnection())
            {
                connection.ConnectionString = connectionString.ConnectionString;
                using (SqlCommand command = new SqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;
                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    connection.Open();
                    using (SqlDataAdapter adapter = new SqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }


        private byte[] GetSerializedObject(Customer cls)
        {
            byte[] clscustomerId = ObjectToByteArray(cls.CustomerId);
            byte[] clsfirstName = ObjectToByteArray(cls.FirstName);
            byte[] clslastName = ObjectToByteArray(cls.LastName);

            byte[] clsArray = new byte[clscustomerId.Length + clsfirstName.Length + clslastName.Length];
            Array.Copy(clscustomerId, 0, clsArray, 0, clscustomerId.Length);
            Array.Copy(clsfirstName, 0, clsArray, 0 + clscustomerId.Length, clsfirstName.Length);
            Array.Copy(clslastName, 0, clsArray, 0 + clscustomerId.Length + clsfirstName.Length, clslastName.Length);

            return clsArray;

        }

        /// <summary>
        /// Determines of the current concurrency array is equal to what's in the database.
        /// </summary>
        /// <returns>True, if the data in memory is equal to whats in the database, otherwise false.</returns>
        protected bool IsDataEqual()
        {
            BusinessLayer.Customer obj = new BusinessLayer.Customer(CustomerId);
            byte[] myArray = _concurrencyArray;
            byte[] clsArray = GetSerializedObject(obj);

            if (myArray.Length != clsArray.Length)
            {
                return false;
            }

            for (int i = 0; i < myArray.Length; i++)
            {
                if (myArray[i] != clsArray[i])
                {
                    return false;
                }
            }
            return true;
        }

        private byte[] ObjectToByteArray(object obj)
        {
            if (obj == null)
                return new byte[] {};

            BinaryFormatter bf = new BinaryFormatter();
            using (MemoryStream ms = new MemoryStream())
            {
                bf.Serialize(ms, obj);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Converts an instance of an object to a string format
        /// </summary>
        /// <param name="format">Specifies if it should convert to XML, BSON, or JSON</param>
        /// <returns>The object, converted to a string representation</returns>
        public string ToString(BusinessLayer.SerializationFormats format)
        {
            SerializableCustomer serializableCustomer = new SerializableCustomer();
            serializableCustomer.CustomerId = IsNull(BusinessLayer.Customer.Fields.CustomerId)
                ? (int?) null : _customerId;
            serializableCustomer.FirstName = IsNull(BusinessLayer.Customer.Fields.FirstName)
                ? null : _firstName;
            serializableCustomer.LastName = IsNull(BusinessLayer.Customer.Fields.LastName)
                ? null : _lastName;
            serializableCustomer.SerializationIsUpdate = _layerGenIsUpdate;

            if (format == BusinessLayer.SerializationFormats.Json)
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(serializableCustomer);
            }

            if (format == BusinessLayer.SerializationFormats.Xml)
            {
                System.Xml.Serialization.XmlSerializer xType = new System.Xml.Serialization.XmlSerializer(serializableCustomer.GetType());

                using (StringWriter sw = new StringWriter())
                {
                    xType.Serialize(sw, serializableCustomer);

                    return sw.ToString();
                }
            }

            if (format == BusinessLayer.SerializationFormats.BsonBase64)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    using (Newtonsoft.Json.Bson.BsonWriter writer = new Newtonsoft.Json.Bson.BsonWriter(ms))
                    {
                        Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer();
                        serializer.Serialize(writer, serializableCustomer);
                    }
                    return Convert.ToBase64String(ms.ToArray());
                }
            }

            return "";
        }


        protected static BusinessLayer.Customer BsonToCustomer(string bson)
        {
            SerializableCustomer z;
            byte[] data = Convert.FromBase64String(bson);
            using (System.IO.MemoryStream ms = new System.IO.MemoryStream(data))
            {
                using (Newtonsoft.Json.Bson.BsonReader reader = new Newtonsoft.Json.Bson.BsonReader(ms))
                {
                    Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer();
                    z = serializer.Deserialize<SerializableCustomer>(reader);
                }
            }

            BusinessLayer.Customer tmp = new BusinessLayer.Customer();

            if (z.CustomerId.HasValue)
            {
                tmp._customerId = z.CustomerId.Value;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.CustomerId);
            } else {
                tmp.SetNull(BusinessLayer.Customer.Fields.CustomerId);
            }
            if (z.FirstName == null)
            {
                tmp.SetNull(BusinessLayer.Customer.Fields.FirstName);
            } else {
                tmp._firstName = z.FirstName;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.FirstName);
            }
            if (z.LastName == null)
            {
                tmp.SetNull(BusinessLayer.Customer.Fields.LastName);
            } else {
                tmp._lastName = z.LastName;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.LastName);
            }

            BusinessLayer.Encryption64 decryptor = new BusinessLayer.Encryption64();
            tmp._connectionString = decryptor.Decrypt(z.SerializationConnectionString, Universal.LayerGenEncryptionKey);
            tmp._layerGenIsUpdate = z.SerializationIsUpdate;
            tmp._layerGenIsDirty = true;
            return tmp;
        }

        protected static BusinessLayer.Customer XmlToCustomer(string xml)
        {
            System.Xml.Serialization.XmlSerializer xType = new System.Xml.Serialization.XmlSerializer(typeof(SerializableCustomer));
            SerializableCustomer z;

            using (StringReader sr = new StringReader(xml))
            {
                z = (SerializableCustomer) xType.Deserialize(sr);
            }

            BusinessLayer.Customer tmp = new BusinessLayer.Customer();

            if (z.CustomerId.HasValue)
            {
                tmp._customerId = z.CustomerId.Value;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.CustomerId);
            } else {
                tmp.SetNull(BusinessLayer.Customer.Fields.CustomerId);
            }
            if (z.FirstName == null)
            {
                tmp.SetNull(BusinessLayer.Customer.Fields.FirstName);
            } else {
                tmp._firstName = z.FirstName;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.FirstName);
            }
            if (z.LastName == null)
            {
                tmp.SetNull(BusinessLayer.Customer.Fields.LastName);
            } else {
                tmp._lastName = z.LastName;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.LastName);
            }

            BusinessLayer.Encryption64 decryptor = new BusinessLayer.Encryption64();
            tmp._connectionString = decryptor.Decrypt(z.SerializationConnectionString, Universal.LayerGenEncryptionKey);
            tmp._layerGenIsUpdate = z.SerializationIsUpdate;
            tmp._layerGenIsDirty = true;
            return tmp;
        }

        protected static BusinessLayer.Customer JsonToCustomer(string json)
        {
            SerializableCustomer z = Newtonsoft.Json.JsonConvert.DeserializeObject<SerializableCustomer>(json);

            BusinessLayer.Customer tmp = new BusinessLayer.Customer();

            if (z.CustomerId.HasValue)
            {
                tmp._customerId = z.CustomerId.Value;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.CustomerId);
            } else {
                tmp.SetNull(BusinessLayer.Customer.Fields.CustomerId);
            }
            if (z.FirstName == null)
            {
                tmp.SetNull(BusinessLayer.Customer.Fields.FirstName);
            } else {
                tmp._firstName = z.FirstName;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.FirstName);
            }
            if (z.LastName == null)
            {
                tmp.SetNull(BusinessLayer.Customer.Fields.LastName);
            } else {
                tmp._lastName = z.LastName;
                tmp.UnsetNull(BusinessLayer.Customer.Fields.LastName);
            }

            BusinessLayer.Encryption64 decryptor = new BusinessLayer.Encryption64();
            tmp._connectionString = decryptor.Decrypt(z.SerializationConnectionString, Universal.LayerGenEncryptionKey);
            tmp._layerGenIsUpdate = z.SerializationIsUpdate;
            tmp._layerGenIsDirty = true;
            return tmp;
        }

        [Serializable]
        public class SerializableCustomer
        {
            private int? _customerId;
            private string _firstName;
            private string _lastName;
            private bool _serializationIsUpdate;
            private string _serializationConnectionString;

            public int? CustomerId
            {
                get { return _customerId; }
                set { _customerId = value; }
            }
            public string FirstName
            {
                get { return _firstName; }
                set { _firstName = value; }
            }
            public string LastName
            {
                get { return _lastName; }
                set { _lastName = value; }
            }
            /// <summary>
            /// Set this to true if <see cref="Save()"></see> should do an update.
            /// Otherwise, set to false to force <see cref="Save()"></see> to do an insert.
            /// </summary>
            public bool SerializationIsUpdate
            {
                get { return _serializationIsUpdate; }
                set { _serializationIsUpdate = value; }
            }

            /// <summary>
            /// The connection string used to connect to the database.
            /// </summary>
            public string SerializationConnectionString
            {
                get { return _serializationConnectionString; }
                set { _serializationConnectionString = value; }
            }
        }

    }
}
